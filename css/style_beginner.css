/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Normlise Reset */

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  font-size: 62.5%;
}

/*
BUT ROOT FONT SIZE IS SET IN HTML 

Set all font settings in the body,
because font is inherited into all child elements,
better perfomance then setting it onto each element
*/

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  box-sizing: border-box;
}

/*
 background-image
The background-image can take multiple commands. The First comand will be on th top position
The linear gradient then can take in as first variable multiple direction 

*/

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url('../img/hero.jpg');
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* clip-path: polygon(50% 0, 100% 100%, 0 100%);  Triangle */
  position: relative;
}

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

.header__text-box {
  position: absolute;
  left: 50%;
  top: 40%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  /* Removes animation bugs - which sometomes happens */
  backface-visibility: hidden;
  margin-bottom: 6rem;
}

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 1000ms;
  animation-timing-function: ease-out;
  /*
  animation: moveInLeft 800ms;
  animation-delay: 3s;
  animation-iteration-count: 3; lets the animation happen more often
   */
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation: moveInRight 1000ms ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80% {
    transform: translateX(1rem);
  }

  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }

  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    transform: translateX(0);
    opacity: 1;
  }
}

/* 
Sudo class :link we use  
the link is a special state of 
a button, so if you want to use
an anchor tag as a button the css
 should look like this.btn:link
 */

/* The tranistion has to be on the intial state */

.btn:link,
.btn:visited {
  display: inline-block;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  font-size: 1.6rem;
}

/* have on active a lower blur so it looks if the button moves downards again
box-shadow: Y X Blur color;
*/
.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 1rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
  background-color: #fff;
  color: #777;
}

/* Appling the animation properties of the start  with fill-mode */
.btn--animated {
  animation: moveInBottom 500ms ease-out 0.75s;
  animation-fill-mode: backwards;
}
/* 
Use Sudo elements for advanced animations 
The sudo elements needs to have a content set
otherwise it wont show up
*/
.btn::after {
  content: '';
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn--white::after {
  background-color: #fff;
}
